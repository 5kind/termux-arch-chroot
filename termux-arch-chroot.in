#!/bin/bash

shopt -s extglob

unshare=0
keepresolvconf=0
log_level=1
unshare_level=0
remount_rootfs=0

m4_include(common)

log_msg(){
  local arg="$@"
  out "$(date +'%b %d %T') $(hostname) $(basename ${0})[$$]: $arg"
}

run_msg(){
  log_msg "$@"
  "$@"
}

run_stat() {
  local func_name="$1"
  local status_msg
  shift
  $func_name "$@" >/dev/null
  local exit_status=$?
  
  if (( ! $exit_status )); then
      status_msg="\033[37m[\033[0m\033[0;32m  OK  \033[0m\033[37m]"
      func_name="$(echo ${func_name:0:1} | awk '{print toupper($0)}')${func_name:1}\033[0m"
      out "$status_msg $func_name $@"
  else
      status_msg="\033[37m[\033[0m\033[0;31mFAILED\033[0m\033[37m]"
      func_name="Failed\033[0m $func_name"
      out "$status_msg $func_name $@" 1>&2
      return $exit_status
  fi
}

exec_msg(){
  if (( $log_level == 0 )) ;then
    run_msg "$@"
  elif (( $log_level == 1 )) ;then
    run_stat "$@"
  elif (( $log_level >= 2 )) ;then
    "$@"
  fi
}

skip_mounted() {
  if mountpoint -q "$1"; then
    warning "$1 is alreadly mounted, skip mount!"
  else
    return 1
  fi
}

chroot_add_mount() {
  if skip_mounted $2;then return 0;fi
  exec_msg mount "$@" && CHROOT_ACTIVE_MOUNTS=("$2" "${CHROOT_ACTIVE_MOUNTS[@]}")
}

chroot_maybe_add_mount() {
  local cond=$1; shift
  if eval "$cond"; then
    chroot_add_mount "$@"
  fi
}

m4_include(fstab-helpers.sh)

try_rm(){
  local file=$1
  if [[ ! -e $file ]]; then
    warning "$file not exist, skip."
  elif [[ -d $file && ! -L $file ]]; then
    warning "$file is a directory, skip."
  else
    rm $file
  fi
  shift
  [[ -z "$@" ]] || try_rm $@
}

chroot_try_add_mount() {
  # chroot_try_add_mount will chroot_bind_device when chroot_add_mount failed.
  local src=$1
  local dest=$2
  shift 2
  local args="$@"

  try_mkdir $dest
  chroot_add_mount $src $dest $args 2>/dev/null
  if (( $? )); then
    local old_src=$src
    src="${dest#$chrootdir}"
    warning "mount $old_src failed! try mount -o bind $src $dest instead!"
    try_mkdir $src
    chroot_bind_device $src $dest
  fi
}

chroot_import_fstab() {
  if [[ ! -e $1 ]] ;then
    return 0
  else
    local chroot_fstab=$1
    fi

  if [[ -d $chroot_fstab ]] ;then
    for fstab_file in $chroot_fstab/fstab* ; do
      chroot_import_fstab $fstab_file
    done
  else
    FSTAB_LINES+="$(grep -vE '^\s*(#|$)' "$chroot_fstab")
"
  fi

  shift
  chroot_import_fstab $@
}

chroot_mount_line() {
  [[ ! -e $src ]] &&
  warning "$src not exist, skip!" &&
  return 0
  local dest=$(resolve_link "$dest" "$chrootdir")
  local line_args="$src $dest -t $fstype -o $opts"
  # mount $src -> $dest
  try_create_dest
  if echo $opts | grep -q "rbind" ;then
    chroot_add_mount_lazy ${line_args}
  else
    chroot_add_mount ${line_args}
  fi
}

chroot_mount_rootfs() {
  local line=$(echo "$FSTAB_LINES" | awk '$2=="/" {print}')
  # mount rootfs from fstab
  if [[ -n $line ]] ; then
    local src=$(echo "$line" | awk '{print $1}')
    local dest=$chrootdir
    local fstype=$(echo "$line" | awk '{print $3}')
    local opts=$(echo "$line" | awk '{print $4}')
    chroot_mount_line
    FSTAB_LINES=$(echo "$FSTAB_LINES" | grep -v "$line")
  fi
  # mount rootfs to itself
  if ! mountpoint -q "$chrootdir"; then
    warning "$chrootdir is not a mountpoint! try bind rootfs!"
    chroot_bind_device $chrootdir $chrootdir
  fi
  # remount rootfs
  if (( $remount_rootfs )) ; then
    exec_msg mount $chrootdir $chrootdir -o remount,exec,suid,relatime,dev
  fi
}

is_special_path() {
  local target="$1"
  local pattern="/proc/.*|/sys/.*|/dev/.*|/run/.*|/tmp/.*"

  if [[ "$target" =~ $pattern ]]; then
    return 0
  else
    return 1
  fi
}

chroot_early_mount_line() {
  if is_special_path $dest ; then
    LATER_MOUNTS+=("$src $dest $fstype $opts $dump $pass")
  else
    dest="$chrootdir/$dest"
    chroot_mount_line
  fi
}

chroot_mount_bind_type() {
  local src
  local dest
  local opts=""
  IFS=':' read -r src dest opts <<< "$bind_info"

  [[ -z $dest ]] && dest=$src

  if [[ -z $opts ]] ; then
    opts="$1"
  else
    opts="$1,$opts"
  fi

  local fstype=none
  local dump=0
  local pass=0
  chroot_early_mount_line
}

chroot_mount_volumes() {
  [[ -z $CHROOT_VOLUMES ]] && return 0

  for bind_info in "${CHROOT_VOLUMES[@]}"; do
    chroot_mount_bind_type rbind
  done
}

chroot_mount_binds() {
  [[ -z $CHROOT_BINDS ]] && return 0

  for bind_info in "${CHROOT_BINDS[@]}"; do
    chroot_mount_bind_type bind
  done
}

chroot_mount_fstab() {
  [[ -z "$FSTAB_LINES" ]] && return 0

  while read src dest fstype opts dump pass; do
    chroot_early_mount_line
  done <<< "$FSTAB_LINES"
}

chroot_init_rootfs() {
  log_msg -- init-rootfs $1 --
  chroot_import_fstab $CHROOT_FSTAB &&
  chroot_mount_rootfs &&
  chroot_mount_binds &&
  chroot_mount_volumes &&
  chroot_mount_fstab &&
  log_msg -- setup-rootfs $1 --
}

chroot_mount_later() {
  (( ! ${#LATER_MOUNTS[@]} )) && return 0

  for line in "${LATER_MOUNTS[@]}"; do
    read -r src dest fstype opts dump pass <<< "$line"
    dest="$chrootdir/$dest"
    chroot_mount_line
  done
}

chroot_later_rootfs() {
  log_msg -- later-rootfs $1 --
  chroot_mount_later "$1"
  mountpoint -q "$1/dev" &&
  chroot_try_add_mount shm "$1/dev/shm" -t tmpfs -o mode=1777,nosuid,nodev
  (( $(stat -c "%a" "$1/dev/shm") == 1777 )) 2>/dev/null &&
  [[ ! -e "$1/run/shm" ]] && ln -s "/dev/shm" "$1/run/shm"
  try_mkdir "$1/run/lock" &&
  chmod 1777 "$1/run/lock"
}

chroot_active_trap() {
  CHROOT_ACTIVE_MOUNTS=()
  CHROOT_ACTIVE_LAZY=()
  CHROOT_ACTIVE_FILES=()

  [[ $(trap -p EXIT) ]] && die '(BUG): attempting to overwrite existing EXIT trap'
  trap "unshare_teardown" EXIT
}

chroot_setup() {
  chroot_active_trap
  chroot_init_rootfs "$1" &&
  chroot_try_add_mount proc "$1/proc" -t proc -o nosuid,noexec,nodev &&
  chroot_try_add_mount sys "$1/sys" -t sysfs -o nosuid,noexec,nodev,ro &&
  ignore_error chroot_maybe_add_mount "[[ -d '$1/sys/firmware/efi/efivars' ]]" \
      efivarfs "$1/sys/firmware/efi/efivars" -t efivarfs -o nosuid,noexec,nodev &&
  chroot_try_add_mount udev "$1/dev" -t devtmpfs -o mode=0755,nosuid &&
  chroot_try_add_mount devpts "$1/dev/pts" -t devpts -o mode=0620,gid=5,nosuid,noexec &&
  chroot_add_mount /run "$1/run" --bind --make-private ||
  chroot_add_mount run "$1/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
  chroot_add_mount tmp "$1/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid &&
  chroot_later_rootfs "$1"
}

chroot_teardown() {
  if (( ${#CHROOT_ACTIVE_MOUNTS[@]} )); then
    exec_msg umount "${CHROOT_ACTIVE_MOUNTS[@]}"
  fi
  unset CHROOT_ACTIVE_MOUNTS
}

chroot_add_mount_lazy() {
  if skip_mounted $2;then return 0;fi
  exec_msg mount "$@" && CHROOT_ACTIVE_LAZY=("$2" "${CHROOT_ACTIVE_LAZY[@]}")
}

chroot_bind_device() {
  touch "$2" && CHROOT_ACTIVE_FILES=("$2" "${CHROOT_ACTIVE_FILES[@]}")
  chroot_add_mount "$1" "$2" --bind
}

chroot_add_link() {
  ln -sf "$1" "$2" && CHROOT_ACTIVE_FILES=("$2" "${CHROOT_ACTIVE_FILES[@]}")
}

chroot_maybe_add_link() {
  [[ -L "$2" ]] || ln -sf "$1" "$2" && 
  CHROOT_ACTIVE_FILES=("$2" "${CHROOT_ACTIVE_FILES[@]}")
}

unshare_setup() {
  chroot_active_trap
  chroot_init_rootfs "$1" &&
  chroot_add_mount_lazy "$1" "$1" --bind &&
  chroot_add_mount proc "$1/proc" -t proc -o nosuid,noexec,nodev &&
  chroot_add_mount_lazy /sys "$1/sys" --rbind &&
  chroot_maybe_add_link /proc/self/fd "$1/dev/fd" &&
  chroot_maybe_add_link /proc/self/fd/0 "$1/dev/stdin" &&
  chroot_maybe_add_link /proc/self/fd/1 "$1/dev/stdout" &&
  chroot_maybe_add_link /proc/self/fd/2 "$1/dev/stderr" &&
  chroot_bind_device /dev/full "$1/dev/full" &&
  chroot_bind_device /dev/null "$1/dev/null" &&
  chroot_bind_device /dev/random "$1/dev/random" &&
  chroot_bind_device /dev/tty "$1/dev/tty" &&
  chroot_bind_device /dev/urandom "$1/dev/urandom" &&
  chroot_bind_device /dev/zero "$1/dev/zero" &&
  chroot_add_mount run "$1/run" -t tmpfs -o nosuid,nodev,mode=0755 &&
  chroot_add_mount tmp "$1/tmp" -t tmpfs -o mode=1777,strictatime,nodev,nosuid &&
  chroot_later_rootfs "$1"
}

unshare_teardown() {
  if (( ${#CHROOT_ACTIVE_LAZY[@]} )); then
    exec_msg umount -l "${CHROOT_ACTIVE_LAZY[@]}"
  fi
  unset CHROOT_ACTIVE_LAZY

  chroot_teardown

  if (( ${#CHROOT_ACTIVE_FILES[@]} )); then
    exec_msg try_rm ${CHROOT_ACTIVE_FILES[@]}
  fi
  unset CHROOT_ACTIVE_FILES
}

# Android Kernel not provide full unshare supoort, use failback function.
pid_unshare="unshare --fork --pid"
$pid_unshare true 2>/dev/null || pid_unshare="unshare --fork"
mount_unshare="$pid_unshare --mount --map-auto --map-root-user --setuid 0 --setgid 0"
$mount_unshare true 2>/dev/null || mount_unshare="$pid_unshare --mount"

# This outputs code for declaring all variables to stdout. For example, if
# FOO=BAR, then running
#     declare -p FOO
# will result in the output
#     declare -- FOO="bar"
# This function may be used to re-declare all currently used variables and
# functions in a new shell.
declare_all() {
  # Remove read-only variables to avoid warnings. Unfortunately, declare +r -p
  # doesn't work like it looks like it should (declaring only read-write
  # variables). However, declare -rp will print out read-only variables, which
  # we can then use to remove those definitions.
  declare -p | grep -Fvf <(declare -rp)
  # Then declare functions
  declare -pf
}

usage() {
  cat <<EOF
usage: ${0##*/} chroot-dir [command] [arguments...]

    -h                  Print this help message
    -N                  Run in unshare mode as a regular user
    -u <user>[:group]   Specify non-root user and optional group to use
    -r                  Do not change the resolv.conf within the chroot
    -m                  Remount \$chrootdir with dev,suid,relatime,exec flags
    -l <num>            Specify the log level, the default is 1
        0               Output with date, hostname, pid etc.
        1               Output with exit status
        2               No output except for stderr & chroot container
        3               No output except for chroot container (like arch-chroot)
    -n <num>            Specify unshare level if run in unshare mode, default 0
        0               mount_unshare; unshare_setup; /sys:/sys:ro
        1               mount_unshare; unshare_setup (like arch-chroot -N)
        2               mount_unshare; chroot_setup (device not isolated)
        3               pid_unshare; unshare_setup (useless mode, why not 0|1?)
        4               pid_unshare; chroot_setup (like arch-chroot without -N)
        5               no unshare; unshare_setup  | (in case unshare not
        6               no unshare; chroot_setup   | available in devices)
          * for -n [3|6], need /sys ro mount, use -b /sys:/sys:ro, -n 0 provided
            since it is a standard isolated Linux container preset.
    -f <path>
        <file>          Mount filesystems by using the specified fstab
        <folder>        Use all the fstab* under the specified folder
    -p <path>           Use specified \$PATH in this script
    -b|-v [args]        Mount host file into the container with bind or rbind
      -b|-v <host_path>[:container_path][:options]  Mount host_path into the 
                        container_path with -o bind(-b)|rbind(-v),options

If 'command' is unspecified, ${0##*/} will launch /bin/bash.

Note that when using arch-chroot, the target chroot directory *should* be a
mountpoint. This ensures that tools such as pacman(8) or findmnt(8) have an
accurate hierarchy of the mounted filesystems within the chroot.

If your chroot target is not a mountpoint, chroot_bind_device will mount the directory on
itself to make it a mountpoint, i.e. 'mount --bind /your/chroot /your/chroot'.

EOF
}

resolve_link() {
  local target=$1
  local root=$2

  # If a root was given, make sure it ends in a slash.
  [[ -n $root && $root != */ ]] && root=$root/

  while [[ -L $target ]]; do
    target=$(readlink -m "$target")
    # If a root was given, make sure the target is under it.
    # Make sure to strip any leading slash from target first.
    [[ -n $root && $target != $root* ]] && target=$root${target#/}
  done

  printf %s "$target"
}

chroot_add_resolv_conf() {
  local chrootdir=$1
  local src
  local dest

  src=$(resolve_link /etc/resolv.conf)
  dest=$(resolve_link "$chrootdir/etc/resolv.conf" "$chrootdir")

  # If we don't have a source resolv.conf file, there's nothing useful we can do.
  [[ -e $src ]] || return 0

  if [[ ! -e $dest ]]; then
    # There are two reasons the destination might not exist:
    #
    #   1. There may be no resolv.conf in the chroot.  In this case, $dest won't exist,
    #      and it will be equal to $1/etc/resolv.conf.  In this case, we'll just exit.
    #      The chroot environment must not be concerned with DNS resolution.
    #
    #   2. $1/etc/resolv.conf is (or resolves to) a broken link.  The environment
    #      clearly intends to handle DNS resolution, but something's wrong.  Maybe it
    #      normally creates the target at boot time.  We'll (try to) take care of it by
    #      creating a dummy file at the target, so that we have something to bind to.

    # Case 1.
    [[ $dest = $chrootdir/etc/resolv.conf ]] && return 0

    # Case 2.
    install -Dm644 /dev/null "$dest" || return 1
  fi

  chroot_add_mount "$src" "$dest" --bind
}

arch-chroot() {
  (( $log_level>1 )) && eval "log_msg() { :; }"

  (( EUID == 0 )) || die 'This script must be run with root privileges'

  [[ -d $chrootdir ]] || die "Can't create chroot on non-directory %s" "$chrootdir"

  $setup "$chrootdir" || die "failed to setup chroot %s" "$chrootdir"
  if (( ! keepresolvconf )); then
    chroot_add_resolv_conf "$chrootdir" || die "failed to setup resolv.conf"
  fi

  if ! mountpoint -q "$chrootdir"; then
    warning "$chrootdir is not a mountpoint. This may have undesirable side effects."
  fi

  chroot_args=()
  [[ $userspec ]] && chroot_args+=(--userspec "$userspec")

  unset LD_PRELOAD

  SHELL=/bin/bash $pid_unshare chroot "${chroot_args[@]}" -- "$chrootdir" "${args[@]}"
}

while getopts ':hNu:rml:n:f:p:b:v:' flag; do
  case $flag in
    h)
      usage
      exit 0
      ;;
    N)
      unshare=1
      ;;
    u)
      userspec=$OPTARG
      ;;
    r)
      keepresolvconf=1
      ;;
    m)
      remount_rootfs=1
      ;;
    l)
      log_level=$OPTARG
      ;;
    n)
      unshare_level=$OPTARG
      ;;
    f)
      CHROOT_FSTAB+=" $OPTARG"
      ;;
    p)
      export PATH=$OPTARG
      ;;
    b)
      CHROOT_BINDS+=("$OPTARG")
      ;;
    v)
      CHROOT_VOLUMES+=("$OPTARG")
      ;;
    :)
      die '%s: option requires an argument -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
    ?)
      die '%s: invalid option -- '\''%s'\' "${0##*/}" "$OPTARG"
      ;;
  esac
done
shift $(( OPTIND - 1 ))

(( $# )) || die 'No chroot directory specified'
chrootdir=$1
shift

args=("$@")
if (( unshare )); then
  case $unshare_level in
    0)
      setup=unshare_setup
      CHROOT_BINDS+=("/sys:/sys:ro")
      $mount_unshare bash -c "$(declare_all); arch-chroot"
      ;;
    1)
      setup=unshare_setup
      $mount_unshare bash -c "$(declare_all); arch-chroot"
      ;;
    2)
      setup=chroot_setup
      $mount_unshare bash -c "$(declare_all); arch-chroot"
      ;;
    3)
      setup=unshare_setup
      arch-chroot
      ;;
    5)
      setup=unshare_setup
      unset pid_unshare mount_unshare
      arch-chroot
      ;;
    6)
      setup=chroot_setup
      unset pid_unshare mount_unshare
      arch-chroot
      ;;
    *)
      setup=chroot_setup
      arch-chroot
      ;;
  esac
else
  setup=chroot_setup
  arch-chroot
fi
